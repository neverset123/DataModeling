parameters{
	dataflow_param_fiscalyear as integer (2020)
}
source(output(
		FiscalYear as integer,
		PayrollNumber as integer,
		AgencyID as string,
		AgencyName as string,
		EmployeeID as string,
		LastName as string,
		FirstName as string,
		AgencyStartDate as date,
		WorkLocationBorough as string,
		TitleCode as string,
		TitleDescription as string,
		LeaveStatusasofJune30 as string,
		BaseSalary as double,
		PayBasis as string,
		RegularHours as double,
		RegularGrossPaid as double,
		OTHours as double,
		TotalOTPaid as double,
		TotalOtherPay as double
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> sqlNycPayroll2020
source(output(
		FiscalYear as integer,
		PayrollNumber as integer,
		AgencyCode as string,
		AgencyName as string,
		EmployeeID as string,
		LastName as string,
		FirstName as string,
		AgencyStartDate as date,
		WorkLocationBorough as string,
		TitleCode as string,
		TitleDescription as string,
		LeaveStatusasofJune30 as string,
		BaseSalary as double,
		PayBasis as string,
		RegularHours as double,
		RegularGrossPaid as double,
		OTHours as double,
		TotalOTPaid as double,
		TotalOtherPay as double
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> sqlNycPayroll2021
sqlNycPayroll2020, sqlNycPayroll2021 union(byName: true)~> union
union filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filter
filter derive(TotalPaid = RegularGrossPaid + TotalOTPaid+TotalOtherPay) ~> derivedColumn
derivedColumn aggregate(groupBy(AgencyName,
		FiscalYear),
	TotalPaid = sum(TotalPaid)) ~> aggregate
aggregate sink(allowSchemaDrift: true,
	validateSchema: false,
	input(
		FiscalYear as integer,
		AgencyName as string,
		TotalPaid as double
	),
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError') ~> sqlSummary
aggregate sink(allowSchemaDrift: true,
	validateSchema: false,
	truncate: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> blobSummary